<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Bloggers on syknapptic</title>
    <link>/categories/r-bloggers/</link>
    <description>Recent content in R Bloggers on syknapptic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r-bloggers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Establishing Meaningful Performance Comparisons between R and Python</title>
      <link>/2018/07/reading-csv-files/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/reading-csv-files/</guid>
      <description>R vs PythonReproducible Python EnvironmentThe DataSmallMediumBigThe CodeR“Base” - utils::read.csv()readr::read_csv()data.table::fread()Pythonpandas.read_csv()Dependencies OnlyThe TestInitial CarpentryThe ResultsExecution Timestl;drAppendicesDependency Load TimesSummary TablesEnvironmentIDERPythonSystemR vs PythonPerformance comparisons between R and Python suck.
Most seem to be run in Jupyter Notebook and many are using Python’s rpy2 library to run poorly optimized R code.</description>
    </item>
    
    <item>
      <title>Thoughts on Teaching R and Yet Another Tidyverse Intro</title>
      <link>/2018/03/yet-another-tidyverse-intro/</link>
      <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/yet-another-tidyverse-intro/</guid>
      <description>ContextReflectionResources Up Fronttibble%&amp;gt;%“Tidy” Dataselect() columnsfilter() Rowsmutate() Columnsarrange() Rowsgroup_by() for Grouped Datasummarize()Image credit to R Memes for Statistical Fiends

Considering this is a blog post, I’m going to get all bloggy here before jumping into the code.
ContextI recently had the opportunity to teach some R coding to colleagues and classmates in a series of workshops.</description>
    </item>
    
    <item>
      <title>GDELT, Missiles, and Image Collection</title>
      <link>/2018/01/collecting-a-data-set-of-missile-images-with-gdelt/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/collecting-a-data-set-of-missile-images-with-gdelt/</guid>
      <description>The Global Database of Events, Language, and Tone, or GDELT, is “a realtime network diagram and database of global human society for open research”.
The potential for a firehose stream of global data has tantalizing possibilities for research, but concrete examples of work beyond simple evaluations of the database’s capabilities are notably absent…
See also:
My hasty walkthrough from November 2017, Evaluating GDELT: Syrian ConflictLet’s see how well we can scoop up a set of ballistic missile images using a combination of packages:</description>
    </item>
    
  </channel>
</rss>