<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on syknapptic</title>
    <link>/post/</link>
    <description>Recent content in Posts on syknapptic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Measures of Dispersion</title>
      <link>/2018/07/measures-of-dispersion/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/measures-of-dispersion/</guid>
      <description>DataStandard DeviationPurposeEquationsCalculationExampleInterpretationDataset.seed(123)norm_vec &amp;lt;- rnorm(1000)library(tidyverse)norm_df &amp;lt;- tibble(val = norm_vec)ggplot(norm_df, aes(x = val)) +geom_density(fill = &amp;quot;pink&amp;quot;, color = NA, alpha = 0.5) +geom_vline(aes(xintercept = mean(val)), color = &amp;quot;darkgreen&amp;quot;) +geom_text(aes(x = mean(val), y = 0.5, label = &amp;quot;mean&amp;quot;), size = 7, family = &amp;quot;serif&amp;quot;) +geom_vline(aes(xintercept = mean(val) + sd(val)), color = &amp;quot;darkblue&amp;quot;) +geom_text(aes(x = mean(val) + sd(val), y = 0.</description>
    </item>
    
    <item>
      <title>Measures of Central Tendency</title>
      <link>/2018/07/central-tendency/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/central-tendency/</guid>
      <description>Toy ValuesPython listR vectorLengthPython’s len()R’s length()Unique ValuesPython’s set()R’s unique()MaxPython’s max()R’s max()MinPython’s min()R’s min()SumPython’s sum()R’s sum()MeanPython’s statistics.mean()R’s mean()ModePython’s statistics.mode()R’s modeMedianPythonREnvironmentRather than letting R and Python do all the work for us (i.</description>
    </item>
    
    <item>
      <title>Bubble Sort</title>
      <link>/2018/07/bubble-sort/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/bubble-sort/</guid>
      <description>PythonUnsorted listBubble Sort FunctionResultRUnsorted vectorBubble Sort FunctionResultEnvironmentPythonUnsorted listunsorted = [9, 2, 8, 3, 7, 4, 6, 5, 1]Bubble Sort Functiondef bubble_sort(unsorted_sequence):sorted_sequence = unsorted_sequencefor iteration, _ in enumerate(sorted_sequence):for i, _ in enumerate(sorted_sequence):if i + 1 &amp;lt;= len(sorted_sequence) - 1:current_value = sorted_sequence[i]next_value = sorted_sequence[i + 1]if current_value &amp;gt; next_value:sorted_sequence[i] = next_valuesorted_sequence[i + 1] = current_valueprint(f&amp;#39;Iteration #{iteration + 1}: {&amp;quot;, &amp;quot;.</description>
    </item>
    
    <item>
      <title>Establishing Meaningful Performance Comparisons between R and Python</title>
      <link>/2018/07/reading-csv-files/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/reading-csv-files/</guid>
      <description>R vs PythonReproducible Python EnvironmentThe DataSmallMediumBigThe CodeR“Base” - utils::read.csv()readr::read_csv()data.table::fread()Pythonpandas.read_csv()Dependencies OnlyThe TestInitial CarpentryThe ResultsExecution Timestl;drAppendicesDependency Load TimesSummary TablesEnvironmentIDERPythonSystemR vs PythonPerformance comparisons between R and Python suck.
Most seem to be run in Jupyter Notebook and many are using Python’s rpy2 library to run poorly optimized R code.</description>
    </item>
    
    <item>
      <title>Variable Assignment</title>
      <link>/2018/07/variable-assignment/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/variable-assignment/</guid>
      <description>RPythonC++RcppRvar_R &amp;lt;- 1var_R## [1] 1Pythonvar_PY = 1print(var_PY)## 1C++#include &amp;lt;iostream&amp;gt;int main() {int var_CPP = 1;std::cout &amp;lt;&amp;lt; var_CPP;return 0;}## 1Rcpp#include &amp;lt;Rcpp.h&amp;gt; // R to/from C++ interface// [[Rcpp::export]]int RCPP_function() {int var_RCPP = 1;return var_RCPP;}RCPP_function() # access the C++ function from R like any other function## [1] 1</description>
    </item>
    
    <item>
      <title>Essential Math</title>
      <link>/2018/07/math/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/math/</guid>
      <description>Our Test ValuesRPythonC++SumRPythonLengthRPythonMeanRPythonOur Test ValuesRHere’s a numeric vector for our R code.
x_R &amp;lt;- c(1.5, 2, 3.25, 4.9, 5, 6.1, 7.39, 8, 9.9)x_R## [1] 1.50 2.00 3.25 4.90 5.00 6.10 7.39 8.00 9.90PythonHere’s a list of floats for our Python code.
x_PY = [1.</description>
    </item>
    
    <item>
      <title>Thoughts on Teaching R and Yet Another Tidyverse Intro</title>
      <link>/2018/03/yet-another-tidyverse-intro/</link>
      <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/yet-another-tidyverse-intro/</guid>
      <description>ContextReflectionResources Up Fronttibble%&amp;gt;%“Tidy” Dataselect() columnsfilter() Rowsmutate() Columnsarrange() Rowsgroup_by() for Grouped Datasummarize()Image credit to R Memes for Statistical Fiends

Considering this is a blog post, I’m going to get all bloggy here before jumping into the code.
ContextI recently had the opportunity to teach some R coding to colleagues and classmates in a series of workshops.</description>
    </item>
    
    <item>
      <title>GDELT, Missiles, and Image Collection</title>
      <link>/2018/01/collecting-a-data-set-of-missile-images-with-gdelt/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/collecting-a-data-set-of-missile-images-with-gdelt/</guid>
      <description>The Global Database of Events, Language, and Tone, or GDELT, is “a realtime network diagram and database of global human society for open research”.
The potential for a firehose stream of global data has tantalizing possibilities for research, but concrete examples of work beyond simple evaluations of the database’s capabilities are notably absent…
See also:
My hasty walkthrough from November 2017, Evaluating GDELT: Syrian ConflictLet’s see how well we can scoop up a set of ballistic missile images using a combination of packages:</description>
    </item>
    
  </channel>
</rss>